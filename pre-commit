#!/usr/bin/env python
import datetime
import os
import subprocess

lang_to_prefix_comment = dict(
    **dict.fromkeys(["js", "ts", "vue", "c", "cpp", "cs", "java", "kt", "dart"], "//"),
    **dict.fromkeys(["py", "sh", "zsh"], "#")
)

lang_to_wrapped_comment = dict(
    **dict.fromkeys(["html", "html5"], ("<!--", "-->"))
)


def get_author():
    name = os.getenv("GIT_AUTHOR_NAME")
    if not name:
        print("Couldn't determine author's name, aborting...")
        exit(-1)
    email = os.getenv("GIT_AUTHOR_EMAIL")
    if not email:
        print("Couldn't determine author's email, aborting...")
        exit(-1)
    return name + "<" + email + ">"


def load_template(template_filename):
    template = []
    with open(template_filename, "rt") as file:
        for line in file:
            line_without_comments = line.split("#", 1)[0]
            if line_without_comments:
                template.append(line_without_comments)
    if len(template) == 0:
        print("Couldn't read or empty template: " + template_filename)
    return template

def build_regex(template):
    regex = ""
    # for line in template:
    #     regex += "^" + line.format({"lastModified": })


def process_file(filename):
    template = load_template(".headertemplate")
    with open(filename, "wt") as file:
        pass


if __name__ == "__main__":
    print(get_author())
    proc = subprocess.Popen(['git', 'diff', '--name-only', '--cached'], stdout=subprocess.PIPE)
    staged_files = proc.stdout.readlines()
    staged_files = [f.decode('utf-8') for f in staged_files]
    for f in staged_files:
        process_file(f)
    print(staged_files)
    exit(-1)
